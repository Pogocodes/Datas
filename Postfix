#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100 // Maximum size for the stack and expression

// Stack structure for operators
struct Stack {
    char items[MAX];  // Array to store stack elements
    int top;          // Index of the top element
};

// Stack structure for operands (for evaluation)
struct NumStack {
    int items[MAX];   // Array to store stack elements
    int top;          // Index of the top element
};

// Function to create and initialize a stack
void createStack(struct Stack* stack) {
    stack->top = -1;  // Initialize top to -1 to indicate that the stack is empty
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return (stack->top == -1);
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return (stack->top == MAX - 1);
}

// Function to push an element onto the stack
void push(struct Stack* stack, char value) {
    if (!isFull(stack)) {
        stack->items[++stack->top] = value;  // Push value and increment top
    }
}

// Function to pop an element from the stack
char pop(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->items[stack->top--];  // Return the top value and decrement top
    }
    return '\0';  // Return null character if the stack is empty
}

// Function to check the precedence of operators
int precedence(char operator) {
    switch (operator) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return 0;
}

// Function to convert infix to postfix
void infixToPostfix(const char* infix, char* postfix) {
    struct Stack stack;          // Declare the stack for operators
    createStack(&stack);         // Initialize the stack

    int j = 0;                   // Index for postfix expression

    for (int i = 0; infix[i] != '\0'; i++) {
        char c = infix[i];

        // If the character is an operand, add it to the postfix expression
        if (isalnum(c)) {
            postfix[j++] = c;    // Add operand to postfix
        }
        // If the character is '(', push it onto the stack
        else if (c == '(') {
            push(&stack, c);
        }
        // If the character is ')', pop from the stack to the postfix expression until '(' is found
        else if (c == ')') {
            while (!isEmpty(&stack) && pop(&stack) != '(') {
                postfix[j++] = pop(&stack);
            }
            pop(&stack); // Pop the '('
        }
        // If the character is an operator
        else if (isOperator(c)) {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(c)) {
                postfix[j++] = pop(&stack); // Pop operators from the stack to postfix
            }
            push(&stack, c); // Push the current operator onto the stack
        }
    }

    // Pop all the remaining operators from the stack
    while (!isEmpty(&stack)) {
        postfix[j++] = pop(&stack);
    }

    postfix[j] = '\0'; // Null terminate the postfix expression
}

// Function to evaluate the postfix expression
int evaluatePostfix(const char* postfix) {
    struct NumStack numStack;       // Declare the stack for numbers
    createStack(&numStack);          // Initialize the stack

    for (int i = 0; postfix[i] != '\0'; i++) {
        char c = postfix[i];

        // If the character is an operand, push it onto the number stack
        if (isdigit(c)) {
            push(&numStack, c - '0'); // Convert char to int
        }
        // If the character is an operator, pop two operands, apply the operator, and push the result
        else {
            int operand2 = pop(&numStack);
            int operand1 = pop(&numStack);
            int result = 0;

            switch (c) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
            }
            push(&numStack, result); // Push the result back onto the stack
        }
    }

    return pop(&numStack); // Return the final result
}

// Main function
int main() {
    char infix[MAX], postfix[MAX];

    // Input infix expression from the user
    printf("Enter an infix expression: ");
    fgets(infix, MAX, stdin);

    // Convert infix to postfix
    infixToPostfix(infix, postfix);

    // Display the postfix expression
    printf("Postfix expression: %s\n", postfix);

    // Evaluate the postfix expression
    int result = evaluatePostfix(postfix);
    printf("Evaluation result: %d\n", result);

    return 0;
}
