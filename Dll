#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the doubly linked list
struct Node {
    int data;                 // Data field
    struct Node* next;        // Pointer to the next node
    struct Node* prev;        // Pointer to the previous node
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;    // Next pointer is NULL for the new node
    newNode->prev = NULL;    // Previous pointer is NULL for the new node
    return newNode;
}

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {  // If the list is empty, set head to the new node
        *head = newNode;
        return;
    }

    struct Node* temp = *head;
    // Traverse to the last node
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Update pointers
    temp->next = newNode;      // Link the last node to the new node
    newNode->prev = temp;      // Link the new node back to the last node
}

// Function to display the list in reverse order
void displayReverse(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    // Traverse to the last node
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Print in reverse order
    printf("Doubly Linked List in Reverse Order: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->prev;
    }
    printf("\n");
}

// Main function to test the doubly linked list implementation
int main() {
    struct Node* head = NULL;  // Initialize the head of the list
    int choice, value;

    while (1) {
        printf("\n1. Insert at End\n2. Display Reverse\n3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 2:
                displayReverse(head);
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
