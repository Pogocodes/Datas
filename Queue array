#include <stdio.h>

#define MAX 5 // Define the maximum size of the queue

// Queue structure
struct Queue {
    int items[MAX];  // Array to store queue elements
    int front;       // Index of the front element
    int rear;        // Index of the rear element
};

// Function to initialize the queue
void initialize(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFull(struct Queue* q) {
    return q->rear == MAX - 1; // Return 1 (true) if full, otherwise 0 (false)
}

// Check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1; // Return 1 (true) if empty, otherwise 0 (false)
}

// Enqueue operation: Add an element to the rear of the queue
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0; // Set front to 0 if this is the first element
    }
    q->rear++; // Move rear to the next position
    q->items[q->rear] = value; // Add the new value
}

// Dequeue operation: Remove an element from the front of the queue
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1; // Return -1 or any other value indicating the queue is empty
    }
    int item = q->items[q->front]; // Get the front item
    if (q->front >= q->rear) {
        q->front = -1; // Reset the queue when it becomes empty
        q->rear = -1;
    } else {
        q->front++; // Move front to the next position
    }
    return item; // Return the dequeued item
}

// Function to display the queue
void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

// Driver program to test the queue implementation
int main() {
    struct Queue q;
    initialize(&q);

    // Test enqueue
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50); // This will fill the queue
    enqueue(&q, 60); // This should show that the queue is full

    display(&q); // Display the queue

    // Test dequeue
    printf("Dequeued: %d\n", dequeue(&q)); // Should dequeue 10
    printf("Dequeued: %d\n", dequeue(&q)); // Should dequeue 20

    display(&q); // Display the queue after dequeue

    enqueue(&q, 60); // Enqueue another element
    display(&q); // Display the queue again

    return 0;
}
