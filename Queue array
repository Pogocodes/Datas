#include <stdio.h>
#include <stdlib.h>

#define MAX 5 // Define the maximum size of the queue

// Structure to represent the queue
struct Queue {
    int items[MAX];  // Array to store the queue elements
    int front;       // Index of the front element
    int rear;        // Index of the rear element
};

// Function to create and initialize a queue with predefined values
struct Queue* createQueue(int arr[], int size) {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = 0;        // Initialize front to 0
    q->rear = size - 1;  // Initialize rear to the last element index
    for (int i = 0; i < size; i++) {
        q->items[i] = arr[i];  // Fill the queue with predefined values
    }
    return q;
}

// Function to check if the queue is full
int isFull(struct Queue* q) {
    return (q->rear == MAX - 1);
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return (q->front > q->rear);
}

// Function to add an element to the queue
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full. Cannot enqueue %d.\n", value);
        return;
    }
    q->rear++;       // Move rear to the next position
    q->items[q->rear] = value;  // Add the new element
    printf("%d enqueued to the queue.\n", value);
}

// Function to remove an element from the queue
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;  // Return -1 if the queue is empty
    }
    int item = q->items[q->front];  // Get the front item
    q->front++;  // Move front to the next position
    return item;  // Return the dequeued item
}

// Function to display the elements of the queue
void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

// Main function to test the queue implementation
int main() {
    int initialValues[] = {10, 20, 30, 40, 50}; // Predefined values
    int size = sizeof(initialValues) / sizeof(initialValues[0]);

    struct Queue* q = createQueue(initialValues, size);  // Create and initialize the queue

    // Display initial queue
    display(q);

    // Example enqueue operation
    enqueue(q, 60); // Try adding an element to the queue

    // Example dequeue operation
    int dequeuedValue = dequeue(q);
    if (dequeuedValue != -1) {
        printf("%d dequeued from the queue.\n", dequeuedValue);
    }

    // Display queue after enqueue and dequeue operations
    display(q);

    // Free the allocated memory for the queue
    free(q);
    return 0;
}
